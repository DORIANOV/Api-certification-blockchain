const ZapClient = require('zaproxy');

const zapOptions = {
  apiKey: process.env.ZAP_API_KEY,
  proxy: {
    host: 'localhost',
    port: 8080
  }
};

// Configuration pour le scan ZAP
const scanConfig = {
  // Configuration générale
  maxChildren: 10,
  recurse: true,
  inScopeOnly: true,
  scanPolicyName: 'Default Policy',
  method: 'GET',
  postData: '',
  contextId: 1,

  // URLs à scanner
  includePaths: [
    'http://localhost:3000/api/.*'
  ],
  excludePaths: [
    'http://localhost:3000/api/auth/logout',
    'http://localhost:3000/api/health'
  ],

  // Configuration des alertes
  alertThreshold: 'Medium',
  attackStrength: 'High',

  // Règles actives
  enabledRules: [
    40012, // SQL Injection
    40014, // Cross Site Scripting
    40018, // SQL Injection MySQL
    40019, // SQL Injection Oracle
    40020, // SQL Injection PostgreSQL
    40021, // SQL Injection Microsoft SQL Server
    40022, // SQL Injection IBM DB2
    40024, // SQL Injection SQLite
    90019, // Server Side Code Injection
    90020, // Remote OS Command Injection
    90021, // XPath Injection
    90022, // Application Error Disclosure
    90023, // XML External Entity Attack
    90024, // Generic Padding Oracle
    90025, // Expression Language Injection
    90026, // SOAP Action Spoofing
    90027, // Cookie Slack Detector
    90028, // Insecure HTTP Method
    90029, // SOAP XML Injection
    90030  // WSDL File Detection
  ],

  // Configuration des authentifications
  authentication: {
    method: 'form',
    loginUrl: 'http://localhost:3000/api/auth/login',
    loginRequestData: 'email={%username%}&password={%password%}',
    loggedInRegex: '\\QAuthentication successful\\E',
    loggedOutRegex: '\\QAuthentication required\\E'
  }
};

// Configuration des règles spécifiques
const ruleConfig = {
  // SQL Injection
  40012: {
    threshold: 'Medium',
    strength: 'High'
  },
  // Cross Site Scripting
  40014: {
    threshold: 'Low',
    strength: 'High'
  },
  // Command Injection
  90020: {
    threshold: 'High',
    strength: 'Insane'
  }
};

// Configuration des rapports
const reportConfig = {
  template: 'traditional-html',
  reportFileName: 'zap-scan-report.html',
  reportFileNamePattern: 'zap-scan-report-${datetime}.html',
  reportDir: './reports/security',
  includedRiskLevels: ['High', 'Medium', 'Low', 'Informational']
};

module.exports = {
  zapOptions,
  scanConfig,
  ruleConfig,
  reportConfig
};
