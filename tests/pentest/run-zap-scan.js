const ZapClient = require('zaproxy');
const { zapOptions, scanConfig, ruleConfig, reportConfig } = require('./zap-config');

async function runZapScan() {
  const zaproxy = new ZapClient(zapOptions);
  
  try {
    console.log('Starting ZAP scan...');

    // Démarrer ZAP
    await zaproxy.core.newSession();
    console.log('New session created');

    // Configurer le contexte
    const contextId = await zaproxy.context.newContext('reports-api');
    await zaproxy.context.includeInContext('reports-api', scanConfig.includePaths);
    await zaproxy.context.excludeFromContext('reports-api', scanConfig.excludePaths);

    // Configurer l'authentification
    await zaproxy.authentication.setAuthenticationMethod(
      contextId,
      'formBasedAuthentication',
      scanConfig.authentication.loginUrl,
      scanConfig.authentication.loginRequestData
    );

    // Configurer les règles
    for (const [ruleId, config] of Object.entries(ruleConfig)) {
      await zaproxy.ascan.setAlertThreshold(ruleId, config.threshold);
      await zaproxy.ascan.setAttackStrength(ruleId, config.strength);
    }

    // Démarrer le spider
    console.log('Starting spider...');
    const spiderScanId = await zaproxy.spider.scan(scanConfig.target, scanConfig.maxChildren);
    
    // Attendre que le spider soit terminé
    while (parseInt(await zaproxy.spider.status(spiderScanId)) < 100) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      process.stdout.write('.');
    }
    console.log('\nSpider completed');

    // Démarrer le scan actif
    console.log('Starting active scan...');
    const scanId = await zaproxy.ascan.scan(
      scanConfig.target,
      true,
      false,
      scanConfig.scanPolicyName,
      null,
      null,
      contextId
    );

    // Attendre que le scan soit terminé
    while (parseInt(await zaproxy.ascan.status(scanId)) < 100) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      const progress = await zaproxy.ascan.status(scanId);
      process.stdout.write(`\rScan progress: ${progress}%`);
    }
    console.log('\nActive scan completed');

    // Générer le rapport
    console.log('Generating report...');
    await zaproxy.reports.generate(
      reportConfig.reportFileName,
      reportConfig.template,
      null,
      reportConfig.reportDir,
      null
    );

    // Obtenir les alertes
    const alerts = await zaproxy.core.alerts();
    console.log('\nScan Results:');
    console.log('-------------');
    console.log(`Total alerts: ${alerts.length}`);

    // Grouper les alertes par niveau de risque
    const alertsByRisk = alerts.reduce((acc, alert) => {
      acc[alert.risk] = (acc[alert.risk] || 0) + 1;
      return acc;
    }, {});

    console.log('\nAlerts by Risk Level:');
    for (const [risk, count] of Object.entries(alertsByRisk)) {
      console.log(`${risk}: ${count}`);
    }

    // Afficher les alertes critiques
    const criticalAlerts = alerts.filter(alert => alert.risk === 'High');
    if (criticalAlerts.length > 0) {
      console.log('\nCritical Alerts:');
      criticalAlerts.forEach(alert => {
        console.log(`\n[${alert.risk}] ${alert.name}`);
        console.log(`URL: ${alert.url}`);
        console.log(`Description: ${alert.description}`);
        console.log(`Solution: ${alert.solution}`);
      });
    }

  } catch (error) {
    console.error('Error during ZAP scan:', error);
    process.exit(1);
  } finally {
    // Nettoyer
    await zaproxy.core.shutdown();
    console.log('\nZAP scan completed');
  }
}

// Exécuter le scan si appelé directement
if (require.main === module) {
  runZapScan().catch(console.error);
}

module.exports = runZapScan;
